version: '3.8'

volumes:
    prometheus_data:
      external: false
    grafana_data:
      external: false
    postgres_data:
      external: false
    shared_data:
      external: false
    alert_data:
      external: false

services:
  nginx:
    image: "utmstack.azurecr.io/crondata-frontend:latest"
    depends_on:
      - grafana
      - prometheus
      - panel
      - alertmanager
      - filebrowser
    ports:
      - "80:80"
      - "9090:9090"
      - "9093:9093"
      - "3000:3000"
      - "8081:8081"

  prometheus:
    image: utmstack.azurecr.io/crondata-prometheus:latest
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
      - shared_data:/etc/prometheus/targets
      - alert_data:/etc/prometheus/alerts
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      - cadvisor

  node-exporter:
    image: utmstack.azurecr.io/crondata-node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100

  alertmanager:
    image: utmstack.azurecr.io/crondata-alertmanager:latest
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  cadvisor:
    image: utmstack.azurecr.io/crondata-google-cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 9001:8080

  grafana:
    image: utmstack.azurecr.io/crondata-grafana
    user: "472"
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/home.json:/usr/share/grafana/public/dashboards/home.json
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - ./grafana/defaults.ini:/usr/share/grafana/conf/defaults.ini
    env_file:
      - ./grafana/config.monitoring

  cron-postgresql:
    image: postgres:12.3
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./postgres/init.sh:/docker-entrypoint-initdb.d/init.sh
    environment:
      - "POSTGRES_USER=postgres"
      - "POSTGRES_PASSWORD=${BD_PASS}"
      - "POSTGRES_DB=cron_data"
    ports:
      - 5432:5432
    command: ["postgres", "-c", "shared_buffers=256MB", "-c", "max_connections=1000"]

  panel:
    image: utmstack.azurecr.io/crondata-backend:latest
    volumes:
      - shared_data:/etc/prometheus/targets
      - alert_data:/etc/prometheus/alerts
    environment:
      - SPRING_PROFILES_ACTIVE=prod,swagger
      - SPRING_DATASOURCE_URL=jdbc:postgresql://cron-postgresql:5432/cron_data
      - CRONDATA_SERVER_HOST=${HOSTNAME}
      - DB_PASS=${BD_PASS}
      - PROMETHEUS_TARGET_CONFIG_PATH=/etc/prometheus/targets
      - JHIPSTER_SLEEP=30 # gives time for other services to boot before the application
    depends_on:
      - cron-postgresql
      - prometheus
    ports:
      - 8080:8080

  filebrowser:
    image: "utmstack.azurecr.io/crondata-filebrowser:latest"
    volumes:
      - alert_data:/etc/prometheus/alerts
    environment:
      - PASSWORD=${BD_PASS}
    depends_on: 
      - prometheus
